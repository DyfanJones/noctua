% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dplyr_integration.R
\name{backend_dbplyr_v2}
\alias{backend_dbplyr_v2}
\alias{sql_query_explain.AthenaConnection}
\alias{sql_query_fields.AthenaConnection}
\alias{sql_escape_date.AthenaConnection}
\alias{sql_escape_datetime.AthenaConnection}
\title{Athena S3 implementation of dbplyr backend functions (api version 2).}
\usage{
sql_query_explain.AthenaConnection(con, sql, format = "text", type = NULL, ...)

sql_query_fields.AthenaConnection(con, sql, ...)

sql_escape_date.AthenaConnection(con, x)

sql_escape_datetime.AthenaConnection(con, x)
}
\arguments{
\item{con}{A \code{\link{dbConnect}} object, as returned by \code{dbConnect()}}

\item{sql}{SQL code to be sent to AWS Athena}

\item{...}{other parameters, currently not implemented}

\item{x}{R object to be transformed into athena equivalent}

\item{name}{Table name if left default noctua will use default from 'dplyr''s \code{compute} function.}

\item{file_type}{What file type to store data.frame on s3, noctua currently supports ["NULL","csv", "tsv", "parquet", "json", "orc"]. 
\code{"NULL"} will let Athena set the file_type for you.}

\item{s3_location}{s3 bucket to store Athena table, must be set as a s3 uri for example ("s3://mybucket/data/")}

\item{partition}{Partition Athena table, requires to be a partitioned variable from previous table.}

\item{compress}{Compress Athena table, currently can only compress ["parquet", "orc"] \href{https://docs.aws.amazon.com/athena/latest/ug/create-table-as.html}{AWS Athena CTAS}}
}
\value{

}
\description{
These functions are used to build the different types of SQL queries. 
The AWS Athena implementation give extra parameters to allow access the to standard DBI Athena methods. They also
utilise AWS Glue to speed up sql query execution.
}
